/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { InformationDesk, Poi, SensitiveArea, TouristicContent, TouristicEvent, Trek } from "types/types";
export { InformationDesk, Poi, SensitiveArea, TouristicContent, TouristicEvent, Trek } from "types/types";
export namespace Components {
    interface GrwApp {
        "api": string;
        "appHeight": string;
        "appWidth": string;
        "attributionLayer": string;
        "center": string;
        "cities": string;
        "colorBackground": string;
        "colorOnPrimary": string;
        "colorOnPrimaryContainer": string;
        "colorOnSecondaryContainer": string;
        "colorOnSurface": string;
        "colorOnSurfaceVariant": string;
        "colorPoiIcon": string;
        "colorPrimaryApp": string;
        "colorPrimaryContainer": string;
        "colorSecondaryContainer": string;
        "colorSensitiveArea": string;
        "colorSurface": string;
        "colorSurfaceContainerHigh": string;
        "colorSurfaceContainerLow": string;
        "colorSurfaceVariant": string;
        "colorTrekLine": string;
        "districts": string;
        "fabBackgroundColor": string;
        "fabColor": string;
        "inBbox": string;
        "languages": string;
        "nameLayer": string;
        "portals": string;
        "practices": string;
        "routes": string;
        "structures": string;
        "themes": string;
        "touristicContents": boolean;
        "touristicEvents": boolean;
        "treks": boolean;
        "urlLayer": string;
        "useGradient": boolean;
        "weather": boolean;
        "zoom": number;
    }
    interface GrwFilter {
        "filterName": string;
        "filterNameProperty": string;
        "filterPlaceholder": string;
        "filterType": string;
        "segment": string;
    }
    interface GrwFilters {
        "handleFilters": Function;
    }
    interface GrwInformationDesk {
        "informationDesk": InformationDesk;
    }
    interface GrwMap {
        "attributionLayer": string;
        "center": string;
        "colorBackground": string;
        "colorOnPrimaryContainer": string;
        "colorOnSurface": string;
        "colorPoiIcon": string;
        "colorPrimaryApp": string;
        "colorPrimaryContainer": string;
        "colorSensitiveArea": string;
        "colorTrekLine": string;
        "isLargeView": boolean;
        "nameLayer": string;
        "resetStoreOnDisconnected": boolean;
        "urlLayer": string;
        "useGradient": boolean;
        "zoom": number;
    }
    interface GrwPoi {
        "poi": Poi;
    }
    interface GrwSearch {
    }
    interface GrwSelectLanguage {
    }
    interface GrwSensitiveAreaDetail {
        "sensitiveArea": SensitiveArea;
    }
    interface GrwTouristicContentCard {
        "isInsideHorizontalList": boolean;
        "isLargeView": boolean;
        "touristicContent": TouristicContent;
    }
    interface GrwTouristicContentDetail {
        "colorBackground": string;
        "colorOnPrimaryContainer": string;
        "colorOnSecondaryContainer": string;
        "colorOnSurface": string;
        "colorPrimaryApp": string;
        "colorPrimaryContainer": string;
        "colorSecondaryContainer": string;
        "colorSurfaceContainerLow": string;
        "isLargeView": boolean;
    }
    interface GrwTouristicContentProvider {
        "api": string;
        "languages": string;
        "portals": string;
        "touristicContentId": string;
    }
    interface GrwTouristicContentsList {
        "colorOnSecondaryContainer": string;
        "colorOnSurface": string;
        "colorPrimaryApp": string;
        "colorSecondaryContainer": string;
        "colorSurfaceContainerLow": string;
        "isLargeView": boolean;
        "resetStoreOnDisconnected": boolean;
    }
    interface GrwTouristicContentsProvider {
        "api": string;
        "cities": string;
        "districts": string;
        "inBbox": string;
        "languages": string;
        "portals": string;
        "structures": string;
        "themes": string;
        "touristicContentId": string;
    }
    interface GrwTouristicEventCard {
        "touristicEvent": TouristicEvent;
    }
    interface GrwTouristicEventCardProvider {
        "api": string;
        "languages": string;
        "portals": string;
        "touristicEventId": string;
    }
    interface GrwTouristicEventDetail {
        "colorBackground": string;
        "colorOnPrimaryContainer": string;
        "colorOnSecondaryContainer": string;
        "colorOnSurface": string;
        "colorPrimaryApp": string;
        "colorPrimaryContainer": string;
        "colorSecondaryContainer": string;
        "colorSurfaceContainerLow": string;
        "isLargeView": boolean;
    }
    interface GrwTrekCard {
        "colorOnSecondaryContainer": string;
        "colorOnSurface": string;
        "colorPrimaryApp": string;
        "colorSecondaryContainer": string;
        "colorSurfaceContainerLow": string;
        "isLargeView": boolean;
        "isStep": false;
        "resetStoreOnDisconnected": boolean;
        "trek": Trek;
    }
    interface GrwTrekDetail {
        "colorBackground": string;
        "colorOnPrimaryContainer": string;
        "colorOnSecondaryContainer": string;
        "colorOnSurface": string;
        "colorPrimaryApp": string;
        "colorPrimaryContainer": string;
        "colorSecondaryContainer": string;
        "colorSurfaceContainerLow": string;
        "isLargeView": boolean;
        "resetStoreOnDisconnected": boolean;
        "trek": Trek;
        "weather": boolean;
    }
    interface GrwTrekProvider {
        "api": string;
        "languages": string;
        "portals": string;
        "trekId": string;
    }
    interface GrwTreksList {
        "colorOnSecondaryContainer": string;
        "colorOnSurface": string;
        "colorPrimaryApp": string;
        "colorSecondaryContainer": string;
        "colorSurfaceContainerLow": string;
        "isLargeView": boolean;
        "resetStoreOnDisconnected": boolean;
    }
    interface GrwTreksProvider {
        "api": string;
        "cities": string;
        "districts": string;
        "inBbox": string;
        "languages": string;
        "portals": string;
        "practices": string;
        "routes": string;
        "structures": string;
        "themes": string;
    }
}
export interface GrwFiltersCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGrwFiltersElement;
}
export interface GrwInformationDeskCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGrwInformationDeskElement;
}
export interface GrwMapCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGrwMapElement;
}
export interface GrwTouristicContentCardCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGrwTouristicContentCardElement;
}
export interface GrwTouristicEventCardCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGrwTouristicEventCardElement;
}
export interface GrwTrekCardCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGrwTrekCardElement;
}
export interface GrwTrekDetailCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGrwTrekDetailElement;
}
declare global {
    interface HTMLGrwAppElement extends Components.GrwApp, HTMLStencilElement {
    }
    var HTMLGrwAppElement: {
        prototype: HTMLGrwAppElement;
        new (): HTMLGrwAppElement;
    };
    interface HTMLGrwFilterElement extends Components.GrwFilter, HTMLStencilElement {
    }
    var HTMLGrwFilterElement: {
        prototype: HTMLGrwFilterElement;
        new (): HTMLGrwFilterElement;
    };
    interface HTMLGrwFiltersElement extends Components.GrwFilters, HTMLStencilElement {
    }
    var HTMLGrwFiltersElement: {
        prototype: HTMLGrwFiltersElement;
        new (): HTMLGrwFiltersElement;
    };
    interface HTMLGrwInformationDeskElement extends Components.GrwInformationDesk, HTMLStencilElement {
    }
    var HTMLGrwInformationDeskElement: {
        prototype: HTMLGrwInformationDeskElement;
        new (): HTMLGrwInformationDeskElement;
    };
    interface HTMLGrwMapElement extends Components.GrwMap, HTMLStencilElement {
    }
    var HTMLGrwMapElement: {
        prototype: HTMLGrwMapElement;
        new (): HTMLGrwMapElement;
    };
    interface HTMLGrwPoiElement extends Components.GrwPoi, HTMLStencilElement {
    }
    var HTMLGrwPoiElement: {
        prototype: HTMLGrwPoiElement;
        new (): HTMLGrwPoiElement;
    };
    interface HTMLGrwSearchElement extends Components.GrwSearch, HTMLStencilElement {
    }
    var HTMLGrwSearchElement: {
        prototype: HTMLGrwSearchElement;
        new (): HTMLGrwSearchElement;
    };
    interface HTMLGrwSelectLanguageElement extends Components.GrwSelectLanguage, HTMLStencilElement {
    }
    var HTMLGrwSelectLanguageElement: {
        prototype: HTMLGrwSelectLanguageElement;
        new (): HTMLGrwSelectLanguageElement;
    };
    interface HTMLGrwSensitiveAreaDetailElement extends Components.GrwSensitiveAreaDetail, HTMLStencilElement {
    }
    var HTMLGrwSensitiveAreaDetailElement: {
        prototype: HTMLGrwSensitiveAreaDetailElement;
        new (): HTMLGrwSensitiveAreaDetailElement;
    };
    interface HTMLGrwTouristicContentCardElement extends Components.GrwTouristicContentCard, HTMLStencilElement {
    }
    var HTMLGrwTouristicContentCardElement: {
        prototype: HTMLGrwTouristicContentCardElement;
        new (): HTMLGrwTouristicContentCardElement;
    };
    interface HTMLGrwTouristicContentDetailElement extends Components.GrwTouristicContentDetail, HTMLStencilElement {
    }
    var HTMLGrwTouristicContentDetailElement: {
        prototype: HTMLGrwTouristicContentDetailElement;
        new (): HTMLGrwTouristicContentDetailElement;
    };
    interface HTMLGrwTouristicContentProviderElement extends Components.GrwTouristicContentProvider, HTMLStencilElement {
    }
    var HTMLGrwTouristicContentProviderElement: {
        prototype: HTMLGrwTouristicContentProviderElement;
        new (): HTMLGrwTouristicContentProviderElement;
    };
    interface HTMLGrwTouristicContentsListElement extends Components.GrwTouristicContentsList, HTMLStencilElement {
    }
    var HTMLGrwTouristicContentsListElement: {
        prototype: HTMLGrwTouristicContentsListElement;
        new (): HTMLGrwTouristicContentsListElement;
    };
    interface HTMLGrwTouristicContentsProviderElement extends Components.GrwTouristicContentsProvider, HTMLStencilElement {
    }
    var HTMLGrwTouristicContentsProviderElement: {
        prototype: HTMLGrwTouristicContentsProviderElement;
        new (): HTMLGrwTouristicContentsProviderElement;
    };
    interface HTMLGrwTouristicEventCardElement extends Components.GrwTouristicEventCard, HTMLStencilElement {
    }
    var HTMLGrwTouristicEventCardElement: {
        prototype: HTMLGrwTouristicEventCardElement;
        new (): HTMLGrwTouristicEventCardElement;
    };
    interface HTMLGrwTouristicEventCardProviderElement extends Components.GrwTouristicEventCardProvider, HTMLStencilElement {
    }
    var HTMLGrwTouristicEventCardProviderElement: {
        prototype: HTMLGrwTouristicEventCardProviderElement;
        new (): HTMLGrwTouristicEventCardProviderElement;
    };
    interface HTMLGrwTouristicEventDetailElement extends Components.GrwTouristicEventDetail, HTMLStencilElement {
    }
    var HTMLGrwTouristicEventDetailElement: {
        prototype: HTMLGrwTouristicEventDetailElement;
        new (): HTMLGrwTouristicEventDetailElement;
    };
    interface HTMLGrwTrekCardElement extends Components.GrwTrekCard, HTMLStencilElement {
    }
    var HTMLGrwTrekCardElement: {
        prototype: HTMLGrwTrekCardElement;
        new (): HTMLGrwTrekCardElement;
    };
    interface HTMLGrwTrekDetailElement extends Components.GrwTrekDetail, HTMLStencilElement {
    }
    var HTMLGrwTrekDetailElement: {
        prototype: HTMLGrwTrekDetailElement;
        new (): HTMLGrwTrekDetailElement;
    };
    interface HTMLGrwTrekProviderElement extends Components.GrwTrekProvider, HTMLStencilElement {
    }
    var HTMLGrwTrekProviderElement: {
        prototype: HTMLGrwTrekProviderElement;
        new (): HTMLGrwTrekProviderElement;
    };
    interface HTMLGrwTreksListElement extends Components.GrwTreksList, HTMLStencilElement {
    }
    var HTMLGrwTreksListElement: {
        prototype: HTMLGrwTreksListElement;
        new (): HTMLGrwTreksListElement;
    };
    interface HTMLGrwTreksProviderElement extends Components.GrwTreksProvider, HTMLStencilElement {
    }
    var HTMLGrwTreksProviderElement: {
        prototype: HTMLGrwTreksProviderElement;
        new (): HTMLGrwTreksProviderElement;
    };
    interface HTMLElementTagNameMap {
        "grw-app": HTMLGrwAppElement;
        "grw-filter": HTMLGrwFilterElement;
        "grw-filters": HTMLGrwFiltersElement;
        "grw-information-desk": HTMLGrwInformationDeskElement;
        "grw-map": HTMLGrwMapElement;
        "grw-poi": HTMLGrwPoiElement;
        "grw-search": HTMLGrwSearchElement;
        "grw-select-language": HTMLGrwSelectLanguageElement;
        "grw-sensitive-area-detail": HTMLGrwSensitiveAreaDetailElement;
        "grw-touristic-content-card": HTMLGrwTouristicContentCardElement;
        "grw-touristic-content-detail": HTMLGrwTouristicContentDetailElement;
        "grw-touristic-content-provider": HTMLGrwTouristicContentProviderElement;
        "grw-touristic-contents-list": HTMLGrwTouristicContentsListElement;
        "grw-touristic-contents-provider": HTMLGrwTouristicContentsProviderElement;
        "grw-touristic-event-card": HTMLGrwTouristicEventCardElement;
        "grw-touristic-event-card-provider": HTMLGrwTouristicEventCardProviderElement;
        "grw-touristic-event-detail": HTMLGrwTouristicEventDetailElement;
        "grw-trek-card": HTMLGrwTrekCardElement;
        "grw-trek-detail": HTMLGrwTrekDetailElement;
        "grw-trek-provider": HTMLGrwTrekProviderElement;
        "grw-treks-list": HTMLGrwTreksListElement;
        "grw-treks-provider": HTMLGrwTreksProviderElement;
    }
}
declare namespace LocalJSX {
    interface GrwApp {
        "api"?: string;
        "appHeight"?: string;
        "appWidth"?: string;
        "attributionLayer"?: string;
        "center"?: string;
        "cities"?: string;
        "colorBackground"?: string;
        "colorOnPrimary"?: string;
        "colorOnPrimaryContainer"?: string;
        "colorOnSecondaryContainer"?: string;
        "colorOnSurface"?: string;
        "colorOnSurfaceVariant"?: string;
        "colorPoiIcon"?: string;
        "colorPrimaryApp"?: string;
        "colorPrimaryContainer"?: string;
        "colorSecondaryContainer"?: string;
        "colorSensitiveArea"?: string;
        "colorSurface"?: string;
        "colorSurfaceContainerHigh"?: string;
        "colorSurfaceContainerLow"?: string;
        "colorSurfaceVariant"?: string;
        "colorTrekLine"?: string;
        "districts"?: string;
        "fabBackgroundColor"?: string;
        "fabColor"?: string;
        "inBbox"?: string;
        "languages"?: string;
        "nameLayer"?: string;
        "portals"?: string;
        "practices"?: string;
        "routes"?: string;
        "structures"?: string;
        "themes"?: string;
        "touristicContents"?: boolean;
        "touristicEvents"?: boolean;
        "treks"?: boolean;
        "urlLayer"?: string;
        "useGradient"?: boolean;
        "weather"?: boolean;
        "zoom"?: number;
    }
    interface GrwFilter {
        "filterName"?: string;
        "filterNameProperty"?: string;
        "filterPlaceholder"?: string;
        "filterType"?: string;
        "segment"?: string;
    }
    interface GrwFilters {
        "handleFilters"?: Function;
        "onResetFilter"?: (event: GrwFiltersCustomEvent<any>) => void;
    }
    interface GrwInformationDesk {
        "informationDesk"?: InformationDesk;
        "onCenterOnMap"?: (event: GrwInformationDeskCustomEvent<{ latitude: number; longitude: number }>) => void;
    }
    interface GrwMap {
        "attributionLayer"?: string;
        "center"?: string;
        "colorBackground"?: string;
        "colorOnPrimaryContainer"?: string;
        "colorOnSurface"?: string;
        "colorPoiIcon"?: string;
        "colorPrimaryApp"?: string;
        "colorPrimaryContainer"?: string;
        "colorSensitiveArea"?: string;
        "colorTrekLine"?: string;
        "isLargeView"?: boolean;
        "nameLayer"?: string;
        "onTouristicContentCardPress"?: (event: GrwMapCustomEvent<number>) => void;
        "onTrekCardPress"?: (event: GrwMapCustomEvent<number>) => void;
        "resetStoreOnDisconnected"?: boolean;
        "urlLayer"?: string;
        "useGradient"?: boolean;
        "zoom"?: number;
    }
    interface GrwPoi {
        "poi"?: Poi;
    }
    interface GrwSearch {
    }
    interface GrwSelectLanguage {
    }
    interface GrwSensitiveAreaDetail {
        "sensitiveArea"?: SensitiveArea;
    }
    interface GrwTouristicContentCard {
        "isInsideHorizontalList"?: boolean;
        "isLargeView"?: boolean;
        "onCardTouristicContentMouseLeave"?: (event: GrwTouristicContentCardCustomEvent<any>) => void;
        "onCardTouristicContentMouseOver"?: (event: GrwTouristicContentCardCustomEvent<number>) => void;
        "onTouristicContentCardPress"?: (event: GrwTouristicContentCardCustomEvent<number>) => void;
        "touristicContent"?: TouristicContent;
    }
    interface GrwTouristicContentDetail {
        "colorBackground"?: string;
        "colorOnPrimaryContainer"?: string;
        "colorOnSecondaryContainer"?: string;
        "colorOnSurface"?: string;
        "colorPrimaryApp"?: string;
        "colorPrimaryContainer"?: string;
        "colorSecondaryContainer"?: string;
        "colorSurfaceContainerLow"?: string;
        "isLargeView"?: boolean;
    }
    interface GrwTouristicContentProvider {
        "api"?: string;
        "languages"?: string;
        "portals"?: string;
        "touristicContentId"?: string;
    }
    interface GrwTouristicContentsList {
        "colorOnSecondaryContainer"?: string;
        "colorOnSurface"?: string;
        "colorPrimaryApp"?: string;
        "colorSecondaryContainer"?: string;
        "colorSurfaceContainerLow"?: string;
        "isLargeView"?: boolean;
        "resetStoreOnDisconnected"?: boolean;
    }
    interface GrwTouristicContentsProvider {
        "api"?: string;
        "cities"?: string;
        "districts"?: string;
        "inBbox"?: string;
        "languages"?: string;
        "portals"?: string;
        "structures"?: string;
        "themes"?: string;
        "touristicContentId"?: string;
    }
    interface GrwTouristicEventCard {
        "onTouristicEventCardPress"?: (event: GrwTouristicEventCardCustomEvent<number>) => void;
        "touristicEvent"?: TouristicEvent;
    }
    interface GrwTouristicEventCardProvider {
        "api"?: string;
        "languages"?: string;
        "portals"?: string;
        "touristicEventId"?: string;
    }
    interface GrwTouristicEventDetail {
        "colorBackground"?: string;
        "colorOnPrimaryContainer"?: string;
        "colorOnSecondaryContainer"?: string;
        "colorOnSurface"?: string;
        "colorPrimaryApp"?: string;
        "colorPrimaryContainer"?: string;
        "colorSecondaryContainer"?: string;
        "colorSurfaceContainerLow"?: string;
        "isLargeView"?: boolean;
    }
    interface GrwTrekCard {
        "colorOnSecondaryContainer"?: string;
        "colorOnSurface"?: string;
        "colorPrimaryApp"?: string;
        "colorSecondaryContainer"?: string;
        "colorSurfaceContainerLow"?: string;
        "isLargeView"?: boolean;
        "isStep"?: false;
        "onCardTrekMouseLeave"?: (event: GrwTrekCardCustomEvent<any>) => void;
        "onCardTrekMouseOver"?: (event: GrwTrekCardCustomEvent<number>) => void;
        "onTrekCardPress"?: (event: GrwTrekCardCustomEvent<number>) => void;
        "resetStoreOnDisconnected"?: boolean;
        "trek"?: Trek;
    }
    interface GrwTrekDetail {
        "colorBackground"?: string;
        "colorOnPrimaryContainer"?: string;
        "colorOnSecondaryContainer"?: string;
        "colorOnSurface"?: string;
        "colorPrimaryApp"?: string;
        "colorPrimaryContainer"?: string;
        "colorSecondaryContainer"?: string;
        "colorSurfaceContainerLow"?: string;
        "isLargeView"?: boolean;
        "onDescriptionIsInViewport"?: (event: GrwTrekDetailCustomEvent<boolean>) => void;
        "onInformationDeskIsInViewport"?: (event: GrwTrekDetailCustomEvent<boolean>) => void;
        "onParentTrekPress"?: (event: GrwTrekDetailCustomEvent<number>) => void;
        "onParkingIsInViewport"?: (event: GrwTrekDetailCustomEvent<boolean>) => void;
        "onPoiIsInViewport"?: (event: GrwTrekDetailCustomEvent<boolean>) => void;
        "onSensitiveAreaIsInViewport"?: (event: GrwTrekDetailCustomEvent<boolean>) => void;
        "onStepsIsInViewport"?: (event: GrwTrekDetailCustomEvent<boolean>) => void;
        "onTouristicContentsIsInViewport"?: (event: GrwTrekDetailCustomEvent<boolean>) => void;
        "onTouristicEventsIsInViewport"?: (event: GrwTrekDetailCustomEvent<boolean>) => void;
        "resetStoreOnDisconnected"?: boolean;
        "trek"?: Trek;
        "weather"?: boolean;
    }
    interface GrwTrekProvider {
        "api"?: string;
        "languages"?: string;
        "portals"?: string;
        "trekId"?: string;
    }
    interface GrwTreksList {
        "colorOnSecondaryContainer"?: string;
        "colorOnSurface"?: string;
        "colorPrimaryApp"?: string;
        "colorSecondaryContainer"?: string;
        "colorSurfaceContainerLow"?: string;
        "isLargeView"?: boolean;
        "resetStoreOnDisconnected"?: boolean;
    }
    interface GrwTreksProvider {
        "api"?: string;
        "cities"?: string;
        "districts"?: string;
        "inBbox"?: string;
        "languages"?: string;
        "portals"?: string;
        "practices"?: string;
        "routes"?: string;
        "structures"?: string;
        "themes"?: string;
    }
    interface IntrinsicElements {
        "grw-app": GrwApp;
        "grw-filter": GrwFilter;
        "grw-filters": GrwFilters;
        "grw-information-desk": GrwInformationDesk;
        "grw-map": GrwMap;
        "grw-poi": GrwPoi;
        "grw-search": GrwSearch;
        "grw-select-language": GrwSelectLanguage;
        "grw-sensitive-area-detail": GrwSensitiveAreaDetail;
        "grw-touristic-content-card": GrwTouristicContentCard;
        "grw-touristic-content-detail": GrwTouristicContentDetail;
        "grw-touristic-content-provider": GrwTouristicContentProvider;
        "grw-touristic-contents-list": GrwTouristicContentsList;
        "grw-touristic-contents-provider": GrwTouristicContentsProvider;
        "grw-touristic-event-card": GrwTouristicEventCard;
        "grw-touristic-event-card-provider": GrwTouristicEventCardProvider;
        "grw-touristic-event-detail": GrwTouristicEventDetail;
        "grw-trek-card": GrwTrekCard;
        "grw-trek-detail": GrwTrekDetail;
        "grw-trek-provider": GrwTrekProvider;
        "grw-treks-list": GrwTreksList;
        "grw-treks-provider": GrwTreksProvider;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "grw-app": LocalJSX.GrwApp & JSXBase.HTMLAttributes<HTMLGrwAppElement>;
            "grw-filter": LocalJSX.GrwFilter & JSXBase.HTMLAttributes<HTMLGrwFilterElement>;
            "grw-filters": LocalJSX.GrwFilters & JSXBase.HTMLAttributes<HTMLGrwFiltersElement>;
            "grw-information-desk": LocalJSX.GrwInformationDesk & JSXBase.HTMLAttributes<HTMLGrwInformationDeskElement>;
            "grw-map": LocalJSX.GrwMap & JSXBase.HTMLAttributes<HTMLGrwMapElement>;
            "grw-poi": LocalJSX.GrwPoi & JSXBase.HTMLAttributes<HTMLGrwPoiElement>;
            "grw-search": LocalJSX.GrwSearch & JSXBase.HTMLAttributes<HTMLGrwSearchElement>;
            "grw-select-language": LocalJSX.GrwSelectLanguage & JSXBase.HTMLAttributes<HTMLGrwSelectLanguageElement>;
            "grw-sensitive-area-detail": LocalJSX.GrwSensitiveAreaDetail & JSXBase.HTMLAttributes<HTMLGrwSensitiveAreaDetailElement>;
            "grw-touristic-content-card": LocalJSX.GrwTouristicContentCard & JSXBase.HTMLAttributes<HTMLGrwTouristicContentCardElement>;
            "grw-touristic-content-detail": LocalJSX.GrwTouristicContentDetail & JSXBase.HTMLAttributes<HTMLGrwTouristicContentDetailElement>;
            "grw-touristic-content-provider": LocalJSX.GrwTouristicContentProvider & JSXBase.HTMLAttributes<HTMLGrwTouristicContentProviderElement>;
            "grw-touristic-contents-list": LocalJSX.GrwTouristicContentsList & JSXBase.HTMLAttributes<HTMLGrwTouristicContentsListElement>;
            "grw-touristic-contents-provider": LocalJSX.GrwTouristicContentsProvider & JSXBase.HTMLAttributes<HTMLGrwTouristicContentsProviderElement>;
            "grw-touristic-event-card": LocalJSX.GrwTouristicEventCard & JSXBase.HTMLAttributes<HTMLGrwTouristicEventCardElement>;
            "grw-touristic-event-card-provider": LocalJSX.GrwTouristicEventCardProvider & JSXBase.HTMLAttributes<HTMLGrwTouristicEventCardProviderElement>;
            "grw-touristic-event-detail": LocalJSX.GrwTouristicEventDetail & JSXBase.HTMLAttributes<HTMLGrwTouristicEventDetailElement>;
            "grw-trek-card": LocalJSX.GrwTrekCard & JSXBase.HTMLAttributes<HTMLGrwTrekCardElement>;
            "grw-trek-detail": LocalJSX.GrwTrekDetail & JSXBase.HTMLAttributes<HTMLGrwTrekDetailElement>;
            "grw-trek-provider": LocalJSX.GrwTrekProvider & JSXBase.HTMLAttributes<HTMLGrwTrekProviderElement>;
            "grw-treks-list": LocalJSX.GrwTreksList & JSXBase.HTMLAttributes<HTMLGrwTreksListElement>;
            "grw-treks-provider": LocalJSX.GrwTreksProvider & JSXBase.HTMLAttributes<HTMLGrwTreksProviderElement>;
        }
    }
}
